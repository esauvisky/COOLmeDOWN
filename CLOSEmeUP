#!/usr/bin/env python3
# Author: Emi Bemol <esauvisky@gmail.com>

import argparse
import re
import subprocess

# GPXpy Library
import gpxpy.geo



def sortkeypicker(keynames):
    negate = set()
    for i, k in enumerate(keynames):
        if k[:1] == '-':
            keynames[i] = k[1:]
            negate.add(k[1:])
    def getit(adict):
       composite = [adict[k] for k in keynames]
       for i, (k, v) in enumerate(zip(keynames, composite)):
           if k in negate:
               composite[i] = -v
       return composite
    return getit

# Arguments
parser = argparse.ArgumentParser(description='COOLyouDOWN', prefix_chars='@')
parser.add_argument('@plain', dest='plain', action='store_const', const=True,
                    help="(Optional) Prints a plain text output without ANSI escape codes.")
parser.add_argument(dest='current_coord', default=None, type=str,
                    help="The coordinate you're in or you're using as base. Must be used with = if the coordinate starts with a negative number.")
parser.add_argument('dump', nargs='?',
                    help="(Optional) Instead of using xclip, you can pass a file with the dump.")

args = parser.parse_args()

if args.plain:
    # No Colors
    CBOLD = '<b>'
    CEND = '</b>'
    CRED = CBLUE = CYELLOW = CGREEN = ''
else:
    # Colored STDOUT
    CEND = '\033[0m'
    CBOLD = '\033[1m'
    CRED = '\033[91m'
    CYELLOW = '\033[33m'
    CGREEN = '\033[32m'
    CBLUE = '\033[34m'

def prettifyCoord(coord, n=6):
    '''Prettifies a coordinate into a beautiful string.

    Arguments:
        coord {[float, float]} -- Pair of latitude and longitude.
    Keyword Arguments:
        n {int} -- Number of decimal places after the period (default: 6).
    Returns:
        string -- Formatted string of the lat-long pair.
    '''
    try:
        if isinstance(coord[0], float) and isinstance(coord[1], float):
            return str(format(coord[0], '.' + str(n) + 'f') + ',' + format(coord[1], '.' + str(n) + 'f'))
    except Exception as e:
        return False


def splitCoords(text):
    '''Splits a string that represents a coordinate into a list of floats

    Arguments:
        text {string} -- The lat/long pair in string format, e.g.: ' 35.281374, 139.663600  '

    Returns:
        list -- A pair of floats, one for latitude and one for longitude.
        boolean -- False, if not a valid coordinate.
    '''
    try:
        # TODO: remove anything that's not a comma or a number
        coord = [float(x.strip()) for x in text.split(',')]
        if not isinstance(coord[0], float) or not isinstance(coord[1], float):
            return False
    except Exception as e:
        #print("Error! " + str(coord) + '\n' + str(e))
        return False
    else:
        return coord


def calculate(lat1, lon1, lat2, lon2):
    '''Calculates the Harvesian distance between two coordinates

    Returns:
        float -- The distance in kilometers, rounded to two decimal places.
    '''
    dist = gpxpy.geo.haversine_distance(lat1, lon1, lat2, lon2)
    dist = dist / 1000
    dist = round(dist, 2)
    return dist


def calculateCD(dist):
    time = 0
    if dist >= 1500:
        time = 120
    elif dist >= 1403 and dist < 1500:
        time = 120
    elif dist >= 1344 and dist < 1403:
        time = 119
    elif dist >= 1300 and dist < 1344:
        time = 117
    elif dist >= 1221 and dist < 1300:
        time = 112
    elif dist >= 1180 and dist < 1221:
        time = 109
    elif dist >= 1020 and dist < 1180:
        time = 101
    elif dist >= 1007 and dist < 1020:
        time = 97
    elif dist >= 948 and dist < 1007:
        time = 94
    elif dist >= 897 and dist < 948:
        time = 90
    elif dist >= 839 and dist < 897:
        time = 88
    elif dist >= 802 and dist < 839:
        time = 83
    elif dist >= 751 and dist < 802:
        time = 81
    elif dist >= 700 and dist < 751:
        time = 76
    elif dist >= 650 and dist < 700:
        time = 73
    elif dist >= 600 and dist < 650:
        time = 69
    elif dist >= 550 and dist < 600:
        time = 65
    elif dist >= 500 and dist < 550:
        time = 61
    elif dist >= 450 and dist < 500:
        time = 58
    elif dist >= 400 and dist < 450:
        time = 54
    elif dist >= 350 and dist < 400:
        time = 49
    elif dist >= 328 and dist < 350:
        time = 48
    elif dist >= 300 and dist < 328:
        time = 46
    elif dist >= 250 and dist < 300:
        time = 41
    elif dist >= 201 and dist < 250:
        time = 36
    elif dist >= 175 and dist < 201:
        time = 33
    elif dist >= 150 and dist < 175:
        time = 31
    elif dist >= 125 and dist < 150:
        time = 28
    elif dist >= 100 and dist < 125:
        time = 26
    elif dist >= 90 and dist < 100:
        time = 24
    elif dist >= 80 and dist < 90:
        time = 23
    elif dist >= 70 and dist < 80:
        time = 22
    elif dist >= 60 and dist < 70:
        time = 21
    elif dist >= 50 and dist < 60:
        time = 20
    elif dist >= 45 and dist < 50:
        time = 19
    elif dist >= 40 and dist < 45:
        time = 18
    elif dist >= 35 and dist < 40:
        time = 17
    elif dist >= 30 and dist < 35:
        time = 16
    elif dist >= 25 and dist < 30:
        time = 14
    elif dist >= 20 and dist < 25:
        time = 11
    elif dist >= 15 and dist < 20:
        time = 8
    elif dist >= 10 and dist < 15:
        time = 6
    elif dist >= 6 and dist < 10:
        time = 4
    elif dist >= 5 and dist < 6:
        time = 3
    elif dist >= 4 and dist < 5:
        time = 2
    elif dist >= 3 and dist < 4:
        time = 2
    elif dist >= 2 and dist < 3:
        time = 1
    elif dist >= 1 and dist < 2:
        time = 0.8

    return time


print(CBOLD + CGREEN + "Keeping you cool, you dirty spoofer!" + CEND)

try:
    currentCoord = splitCoords(args.current_coord)
except Exception as e:
    print(CBOLD + CRED + 'The coordinate you used doesn\'t seem valid!' + CEND + '\nGimme your cord with something like \'"-12.34567, 89.012345" (in quotes works better)')

if args.dump is None:
    try:
        xclip = subprocess.run(['xclip', '-o', '-selection', 'clipboard'], stdout=subprocess.PIPE)
    except Exception as e:
        print(CBOLD + CRED + "ERROR: something happened, must likely you don't have xclip installed on your machine." + CEND)
        print(e)
        exit()
    finally:
        bigList = xclip.stdout.decode('utf-8').split('\n')
else:
    with open(args.dump) as file:
        bigList = [line for line in file]
        # for line in file:
        # bigList = file.readlines()


# with open('list.txt', 'rU') as file:
#     for line in file:


# bigList = coords.strip('\n').replace('\n', ' ')
# coords = re.findall('[-0-9.]+, *[-0-9.]+', bigList)
# coordsList = [splitCoords(coord) for coord in coords]

nests = []

for n, line in enumerate(bigList):
    try:
        coord = splitCoords(re.findall('[-0-9.]+, *[-0-9.]+', line)[0])
    except Exception:
        # Line does not contain a coordinate
        continue

    try:
        dist = calculate(coord[0], coord[1], currentCoord[0], currentCoord[1])
    except Exception as e:
        print(CRED + 'Some unknown error happened!\nPlease copy below and report it to @esauvisky or open an issue on GitHub. Thanks!')
        print('Coords:\n' + coord[0] + ' ' + coord[1] + ' ' + currentCoord[0] + ' ' + currentCoord[1])
        print(e)
        exit()

    cooldown = calculateCD(dist)
    if cooldown < 120:
        nest = {'cooldown': cooldown, 'text': ''}

        color = CGREEN if cooldown < 15 else CYELLOW if cooldown < 45 else CRED

        if args.plain:
            p = re.compile(r"([ðŸ‡¦-ðŸ‡¿a-z:_]+) {0,2}([A-Z][A-Za-z0-9' ]+) \<[0-9a-zA-Z:]+\> (.+) (\([+\d-]+\))")
        else:
            p = re.compile(r'.*:flag_..: ([A-z ]+) :\d+: .+(\([+\d-]+\).*$)')
               # p = re.compile(r".*_[a-z]{2}: +(\S+) \<[0-9a-zA-Z:]+\> (.+) (\([0-9-+]+\))");
 # p = re.compile(r".*_[a-z]{2}: +(\S+) \<[0-9a-zA-Z:]+\> (.+) (\([0-9-+]+\))");

for n, line in enumerate(bigList):
    try:
        coord = splitCoords(re.findall('[-0-9.]+, *[-0-9.]+', line)[0])
    except Exception:
        # Line does not contain a coordinate
        continue

    try:
        dist = calculate(coord[0], coord[1], currentCoord[0], currentCoord[1])
    except Exception as e:
        print(CRED + 'Some unknown error happened!\nPlease copy below and report it to @esauvisky or open an issue on GitHub. Thanks!')
        print('Coords:\n' + coord[0] + ' ' + coord[1] + ' ' + currentCoord[0] + ' ' + currentCoord[1])
        print(e)
        exit()

    cooldown = calculateCD(dist)
    if cooldown < 120:
        nest = {'cooldown': cooldown, 'text': ''}

        color = CGREEN if cooldown < 15 else CYELLOW if cooldown < 45 else CRED

        if args.plain:
            p = re.compile(r"([ðŸ‡¦-ðŸ‡¿a-z:_]+) {0,2}([A-Z][A-Za-z0-9' ]+) \<[0-9a-zA-Z:]+\> (.+) (\([+\d-]+\))")
        else:
            p = re.compile(r'.*:flag_..: ([A-z ]+) :\d+: .+(\([+\d-]+\).*$)')
        # p = re.compile(r".*_[a-z]{2}: +(\S+) \<[0-9a-zA-Z:]+\> (.+) (\([0-9-+]+\))");
        previous_line = p.match(bigList[n - 1])

        # print(CBOLD + previous_line.group(1) + '  ' + previous_line.group(2) + ' - ' + previous_line.group(3) + ' ' + previous_line.group(4) + CEND + '\n')
        if previous_line:
            if args.plain:
                nest['text'] += previous_line.group(1) + ' ' + CBOLD + previous_line.group(2) + ' <i>-' + previous_line.group(3) + '</i> ' + CBOLD + previous_line.group(4) + CEND + '\n'
            else:
                nest['text'] += CBOLD + CGREEN + previous_line.group(1) + ' ' + previous_line.group(2) + CEND + '\n'
        else:
            nest['text'] += CBOLD + str(previous_line).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;') + CEND + '\n'

        if args.plain:
            nest['text'] += "Coord: <code>" + prettifyCoord(coord) + "</code>\nCooldown is: <b>" + str(cooldown) + ' minutes</b>' + ' (' + str(dist) + 'km)' + '\n'
        else:
            nest['text'] += "Coord: " + CBLUE + prettifyCoord(coord) + CEND + "\nCooldown: is " + CBOLD + color + str(cooldown) + ' minutes' + CEND + ' (' + str(dist) + 'km)' + '\n'
        nest['text'] += '--------------------------------------------'
        previous_line = p.match(bigList[n - 1])

for n, line in enumerate(bigList):
    try:
        coord = splitCoords(re.findall('[-0-9.]+, *[-0-9.]+', line)[0])
    except Exception:
        # Line does not contain a coordinate
        continue

    try:
        dist = calculate(coord[0], coord[1], currentCoord[0], currentCoord[1])
    except Exception as e:
        print(CRED + 'Some unknown error happened!\nPlease copy below and report it to @esauvisky or open an issue on GitHub. Thanks!')
        print('Coords:\n' + coord[0] + ' ' + coord[1] + ' ' + currentCoord[0] + ' ' + currentCoord[1])
        print(e)
        exit()

    cooldown = calculateCD(dist)
    if cooldown < 120:
        nest = {'cooldown': cooldown, 'text': ''}

        color = CGREEN if cooldown < 15 else CYELLOW if cooldown < 45 else CRED

        if args.plain:
            p = re.compile(r"([ðŸ‡¦-ðŸ‡¿a-z:_]+) {0,2}([A-Z][A-Za-z0-9' ]+) \<[0-9a-zA-Z:]+\> (.+) (\([+\d-]+\))")
        else:
            p = re.compile(r'.*:flag_..: ([A-z ]+) :\d+: .+(\([+\d-]+\).*$)')
        # p = re.compile(r".*_[a-z]{2}: +(\S+) \<[0-9a-zA-Z:]+\> (.+) (\([0-9-+]+\))");
        previous_line = p.match(bigList[n - 1])

        # print(CBOLD + previous_line.group(1) + '  ' + previous_line.group(2) + ' - ' + previous_line.group(3) + ' ' + previous_line.group(4) + CEND + '\n')
        if previous_line:
            if args.plain:
                nest['text'] += previous_line.group(1) + ' ' + CBOLD + previous_line.group(2) + ' <i>-' + previous_line.group(3) + '</i> ' + CBOLD + previous_line.group(4) + CEND + '\n'
            else:
                nest['text'] += CBOLD + CGREEN + previous_line.group(1) + ' ' + previous_line.group(2) + CEND + '\n'
        else:
            nest['text'] += CBOLD + str(previous_line).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;') + CEND + '\n'

        if args.plain:
            nest['text'] += "Coord: <code>" + prettifyCoord(coord) + "</code>\nCooldown is: <b>" + str(cooldown) + ' minutes</b>' + ' (' + str(dist) + 'km)' + '\n'
        else:
            nest['text'] += "Coord: " + CBLUE + prettifyCoord(coord) + CEND + "\nCooldown: is " + CBOLD + color + str(cooldown) + ' minutes' + CEND + ' (' + str(dist) + 'km)' + '\n'
        nest['text'] += '--------------------------------------------'


for n, line in enumerate(bigList):
    try:
        coord = splitCoords(re.findall('[-0-9.]+, *[-0-9.]+', line)[0])
    except Exception:
        # Line does not contain a coordinate
        continue

    try:
        dist = calculate(coord[0], coord[1], currentCoord[0], currentCoord[1])
    except Exception as e:
        print(CRED + 'Some unknown error happened!\nPlease copy below and report it to @esauvisky or open an issue on GitHub. Thanks!')
        print('Coords:\n' + coord[0] + ' ' + coord[1] + ' ' + currentCoord[0] + ' ' + currentCoord[1])
        print(e)
        exit()

    cooldown = calculateCD(dist)
    if cooldown < 120:
        nest = {'cooldown': cooldown, 'text': ''}

        color = CGREEN if cooldown < 15 else CYELLOW if cooldown < 45 else CRED

        if args.plain:
            p = re.compile(r"([ðŸ‡¦-ðŸ‡¿a-z:_]+) {0,2}([A-Z][A-Za-z0-9' ]+) \<[0-9a-zA-Z:]+\> (.+) (\([+\d-]+\))")
        else:
            p = re.compile(r'.*:flag_..: ([A-z ]+) :\d+: .+(\([+\d-]+\).*$)')
        # p = re.compile(r".*_[a-z]{2}: +(\S+) \<[0-9a-zA-Z:]+\> (.+) (\([0-9-+]+\))");
        previous_line = p.match(bigList[n - 1])

        # print(CBOLD + previous_line.group(1) + '  ' + previous_line.group(2) + ' - ' + previous_line.group(3) + ' ' + previous_line.group(4) + CEND + '\n')
        if previous_line:
            if args.plain:
                nest['text'] += previous_line.group(1) + ' ' + CBOLD + previous_line.group(2) + ' <i>-' + previous_line.group(3) + '</i> ' + CBOLD + previous_line.group(4) + CEND + '\n'
            else:
                nest['text'] += CBOLD + CGREEN + previous_line.group(1) + ' ' + previous_line.group(2) + CEND + '\n'
        else:
            nest['text'] += CBOLD + str(previous_line).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;') + CEND + '\n'

        if args.plain:
            nest['text'] += "Coord: <code>" + prettifyCoord(coord) + "</code>\nCooldown is: <b>" + str(cooldown) + ' minutes</b>' + ' (' + str(dist) + 'km)' + '\n'
        else:
            nest['text'] += "Coord: " + CBLUE + prettifyCoord(coord) + CEND + "\nCooldown: is " + CBOLD + color + str(cooldown) + ' minutes' + CEND + ' (' + str(dist) + 'km)' + '\n'
        nest['text'] += '--------------------------------------------'
        # print(CBOLD + previous_line.group(1) + '  ' + previous_line.group(2) + ' - ' + previous_line.group(3) + ' ' + previous_line.group(4) + CEND + '\n')
        if previous_line:
            if args.plain:
                nest['text'] += previous_line.group(1) + ' ' + CBOLD + previous_line.group(2) + ' <i>-' + previous_line.group(3) + '</i> ' + CBOLD + previous_line.group(4) + CEND + '\n'
            else:
                nest['text'] += CBOLD + CGREEN + previous_line.group(1) + ' ' + previous_line.group(2) + CEND + '\n'
        else:
            nest['text'] += CBOLD + str(previous_line).replace('<', '&lt;').replace('>', '&gt;').replace('&', '&amp;') + CEND + '\n'

        if args.plain:
            nest['text'] += "Coord: <code>" + prettifyCoord(coord) + "</code>\nCooldown is: <b>" + str(cooldown) + ' minutes</b>' + ' (' + str(dist) + 'km)' + '\n'
        else:
            nest['text'] += "Coord: " + CBLUE + prettifyCoord(coord) + CEND + "\nCooldown: is " + CBOLD + color + str(cooldown) + ' minutes' + CEND + ' (' + str(dist) + 'km)' + '\n'
        nest['text'] += '--------------------------------------------'

        nests.append(nest)

nests = sorted(nests, key=sortkeypicker(['cooldown']))

for nest in nests:
    print(nest['text'], '')
